namespace tictictoe_10._2._2023
{
    internal class Program
    {
        static void Main(string[] args)
        {

            bool playAgain = true;

            do
            {
                Console.Clear();
                Console.WriteLine();
                Console.WriteLine("\tLET'S PLAY TIC, TAC, TOE!");
                Console.WriteLine("\n");
                Console.WriteLine("This game will simulate a game of Tic Tac Toe.");
                Console.WriteLine("Player 1 is 'X'. Player 2 is 'O'.");
                Console.WriteLine("\n");

                string[,] gameBoard = new string[3, 3];
                gameBoard = InitializeBoard(gameBoard);

                int x = 0, y = 0;
                int turnCount = 0;
                int gameCount = 0;
                int winCount = 0;
                int check = 2;
                bool gameOver = false;

                


                Console.Write("Press any key when you are ready to play!\t");
                Console.ReadKey();

                do
                {
                    Console.Clear();
                    drawBoard(gameBoard);
                    turnCount++;

                    if (turnCount % 2 == 1) //begin player 1 turn
                    {
                        PlayerOne(gameBoard); //getting user input & validating

                    }//end player 1 turn

                    check = winCheck(gameBoard);

                    if (turnCount % 2 == 0) //begin player 2 turn
                    {
                        PlayerTwo(gameBoard); //getting user input & validating

                    }//end player 2 turn

                    check = winCheck(gameBoard);
                    Console.Clear();
                    drawBoard(gameBoard);

                    switch (check)
                    {
                        case -1: { gameOver = true; gameCount++; winCount++; Console.WriteLine("Player 1 WINS!!!"); break; }
                        case 0: { gameOver = true; gameCount++; winCount++; Console.WriteLine("TIE!!!"); break; }
                        case 1: { gameOver = true; gameCount++; winCount++; Console.WriteLine("Player 2 WINS!!!"); break; }
                        case 2: { break; }

                    }//end switch


                } while (!gameOver); //end while gameover loop


                // games won and games played is incorrect. also need to validate input here. 
                Console.WriteLine("Games Won:\t" + winCount);
                Console.WriteLine("Total Games Played:\t" + gameCount);
                Console.WriteLine();


                Console.Write("Would you like to play again? (Y/N): ");
                string newGame = Console.ReadLine().ToUpper();
                playAgain = (newGame == "Y");  // figure out what is actually happening here...


            } while (playAgain);  // end play again loop

            Console.ReadKey();
        }//end main

        static string[,] InitializeBoard(string[,] Board)
        {
            //loop to display the "drawBoard"
            for (int i = 0; i < Board.GetLength(0); i++)
            {
                for (int j = 0; j < Board.GetLength(1); j++)
                {
                    Board[i, j] = "*";
                }

            }

            return Board;

            //end loop for "drawBoard"


        }//end InitializeBoard

        static void drawBoard(string[,] board)
        {
            //function draws the board on the screen

            Console.WriteLine($"         0     1     2");
            Console.WriteLine();
            Console.WriteLine($"    0    " + board[0, 0] + "  |  " + board[0, 1] + "  |  " + board[0, 2]);
            Console.WriteLine("       -----|-----|-----");
            Console.WriteLine($"    1    " + board[1, 0] + "  |  " + board[1, 1] + "  |  " + board[1, 2]);
            Console.WriteLine("       -----|-----|-----");
            Console.WriteLine($"    2    " + board[2, 0] + "  |  " + board[2, 1] + "  |  " + board[2, 2]);
            Console.WriteLine("       -----|-----|-----");

            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();

        }//end drawBoard

        static string[,] placeMarker(string[,] board, string marker, int x, int y)
        {

            if (board[x, y] == "X" || board[x, y] == "O")
            {

                if (marker == "X")
                {
                    Console.WriteLine("Sorry, that place is taken!");
                    PlayerOne(board);
                    if (x < 0 || x > 2 && y < 0 || y > 2)
                    {
                        Console.Write("Invalid input.");
                        PlayerOne(board);

                    }  //validate user input

                }

                else
                {

                    Console.WriteLine("Sorry, that place is taken!");
                    PlayerTwo(board);
                    if (x < 0 || x > 2 && y < 0 || y > 2)
                    {
                        Console.Write("Invalid input.");
                        PlayerTwo(board);

                    }  //validate user input

                }
            }

            board[x, y] = marker;
            return board;

        }//end placeMarker

        static void PlayerOne(string[,] board)  //add code to check if no entry as well
        {

            int x = 0;
            int y = 0;
            int check = 3;


            //row selection

            Console.Write("Player 1, please pick a side row number (0-2) to place your 'X':\t");
            x = int.Parse(Console.ReadLine());
            if (x < 0 || x > 2)
            {
                Console.Write("Invalid input. Player 1, please enter another side row value (0-2).\t");
                x = int.Parse(Console.ReadLine());
            }


            //column selection
            Console.Write("Player 1, please pick a top column number (0-2) to place your 'X':\t");
            y = int.Parse(Console.ReadLine());
            if (y < 0 || y > 2)
            {
                Console.Write("Invalid input. Player 1, please enter another top column value (0-2).\t");
                y = int.Parse(Console.ReadLine());
            }


            board = placeMarker(board, "X", x, y);
            //check = winCheck(board);

        }//end player 1 turn

        static void PlayerTwo(string[,] board)  //add code to check if no entry as well
        {

            int x = 0;
            int y = 0;
            bool gameOver = true;
            int check = 3;

            //Player 2 Turn, get user input

            //do
            //{
            //row selection
            Console.Write("Player 2, please pick a side row number (0-2) to place your 'O':\t");
            x = int.Parse(Console.ReadLine());
            if (x < 0 || x > 2)
            {
                Console.Write("Invalid input. Player 2, please enter another side row value (0-2).\t");
                x = int.Parse(Console.ReadLine());
            }

            //column selection
            Console.Write("Player 2, please pick a top column number (0-2) to place your 'O':\t");
            y = int.Parse(Console.ReadLine());
            if (y < 0 || y > 2)
            {
                Console.Write("Invalid input. Player 2, please enter another top column value (0-2).\t");
                y = int.Parse(Console.ReadLine());
            }

            //} while (!gameOver); //validating column number

            board = placeMarker(board, "O", x, y);
            //check = winCheck(board);

        }//end player 2 turn

        static int winCheck(string[,] Board)
        {
            //checks user input against board for wins

            //int x = 0;
            //int y = 0;

            //Board = placeMarker(Board, "X", x, y);

            if (Board[0, 0] == Board[0, 1] && Board[0, 1] == Board[0, 2])
            {
                if (Board[0, 0] == "X")
                {
                    return -1;
                }
                else if (Board[0, 0] == "O")
                {
                    return 1;
                }
            }
            else if (Board[1, 0] == Board[1, 1] && Board[1, 1] == Board[1, 2])
            {
                if (Board[1, 0] == "X")
                {
                    return -1;
                }
                else if (Board[1, 0] == "O")
                {
                    return 1;
                }
            }
            else if (Board[2, 0] == Board[2, 1] && Board[2, 1] == Board[2, 2])
            {
                if (Board[2, 0] == "X")
                {
                    return -1;
                }
                else if (Board[2, 0] == "O")
                {
                    return 1;
                }//end horizontal wins
            }
            else if (Board[0, 0] == Board[1, 0] && Board[2, 0] == Board[0, 0])
            {
                if (Board[0, 0] == "X")
                {
                    return -1;
                }
                else if (Board[0, 0] == "O")
                {
                    return 1;
                }
            }
            else if (Board[0, 1] == Board[1, 1] && Board[2, 1] == Board[0, 1])
            {
                if (Board[0, 1] == "X")
                {
                    return -1;
                }
                else if (Board[0, 1] == "O")
                {
                    return 1;
                }
            }
            else if (Board[0, 2] == Board[1, 2] && Board[2, 2] == Board[0, 2])
            {
                if (Board[0, 2] == "X")
                {
                    return -1;
                }
                else if (Board[0, 2] == "O")
                {
                    return 1;
                }//End vertical wins
            }
            else if (Board[0, 2] == Board[1, 1] && Board[2, 0] == Board[0, 2])
            {
                if (Board[0, 2] == "X")
                {
                    return -1;
                }
                else if (Board[0, 2] == "O")
                {
                    return 1;
                }
            }
            else if (Board[0, 0] == Board[1, 1] && Board[2, 2] == Board[0, 0])
            {
                if (Board[0, 0] == "X")
                {
                    return -1;
                }
                else if (Board[0, 0] == "O")
                {
                    return 1;
                }
            }//end diagnal wins
            for (int index = 0; index < Board.GetLength(0); index++)
            {
                for (int j = 0; j < Board.GetLength(1); j++)
                {
                    if (Board[index, j] == "*")
                    {
                        return 2;
                    }
                }
            }
            return 0;

        }//end winCheck


    }//end class
}//end namespace
